What happens when you initialize a repository? Why do you need to do it?

    git init creates a .git directory, to contain the repository metadata
    initially there is no 'commit'
    
How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area contains those files which are to be added in the nest commit.
    This allows to select subgroups of files fropm a larger set of changes and commit them separately
    which allows to create logically coherent change sets.

How can you use the staging area to make sure you have one commit per logical
change?

	use 'git add' to add related files to the staging area
	then 'git commit' to commit those related changes together.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would help when I want to maintain a working 'master' while simultaneously
	making experimental changes that may or may not work out.

How do the diagrams help you visualize the branch structure?

	The diagrams explicitly describe a tree structure, in whech every node has a progenitor.
	A 'branch' creates a bifurcation or 'fork' in the line of inheritance. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The 2 forked tree branches are rejoined - two branches reconnect at one node, forming a single new branch / line from the original 2

	This fork / branch / merge model emphasises the tree structure - i.e. that every node has a parent.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	pro: automatic merging occurs when there is 100% No conflict.
	If there is any pssibility of merge conflic, this is flagged for the user to resolve.
	con: the user always must resolve merge conflicts 
